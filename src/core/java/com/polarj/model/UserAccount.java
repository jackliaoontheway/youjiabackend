package com.polarj.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Index;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang3.StringUtils;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.polarj.common.CommonConstant;
import com.polarj.common.utility.CryptoUtil;
import com.polarj.model.annotation.FieldMetaData;
import com.polarj.model.annotation.I18nField;
import com.polarj.model.annotation.ModelMetaData;
import com.polarj.model.enumeration.FieldMetaDataSupportedDataType;
import com.polarj.model.enumeration.UserAccountStatus;
import com.polarj.workflow.model.ModelWithWorkflowStep;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ModelMetaData(label = "User Account", iconName = "account_box", searchField = "loginName", level = 2,
        uploadable = false, showDetailFieldName = "loginName")
@Entity
@Table(name = "useraccount",
        indexes = { @Index(columnList = "loginName", name = "UK_UserAccount_LoginName", unique = true) })
public @ToString @EqualsAndHashCode(callSuper = false) class UserAccount extends ModelWithWorkflowStep
        implements HasOwner, HasFieldInJson, HasSubWithFieldInJson
{
    private static final long serialVersionUID = -4883863886127766993L;

    @FieldMetaData(position = 10, label = "Login Name", required = true, minLength = 6, maxLength = 60)
    @Column(name = "loginName", length = 128, nullable = false)
    private @Getter String loginName;

    @JsonIgnore
    @Column(length = 128, nullable = false)
    private @Getter @Setter String hashedLoginName;

    @JsonIgnore
    @Column(name = "passwordSalt", length = 64, nullable = false)
    private @Getter @Setter String passwordSalt;

    @JsonIgnore
    @Column(name = "passwordHash", length = 128, nullable = false)
    private @Getter @Setter String passwordHash;

    @I18nField
    @FieldMetaData(position = 20, label = "Status", required = true, enumClass = UserAccountStatus.class)
    @Column(name = "status", length = 32)
    private @Getter @Setter String status;

    @JsonIgnore
    @Column(name = "nonLoginToken", length = 64)
    private @Getter @Setter String nonLoginToken;

    @JsonIgnore
    @Column(name = "apiPassword", length = 64)
    private @Getter @Setter String apiPassword;

    @FieldMetaData(position = 30, label = "API Token", autogenerated = true)
    @Column(length = 512)
    private @Getter @Setter String apiToken;

    @FieldMetaData(position = 25, label = "User Roles", dataType = FieldMetaDataSupportedDataType.ARRAY,
            enumClass = UserAccountRole.class, hasOwner = true, labelField = "label", multiChoice = true,
            managementSeparately = true, uniqueField = "code")
    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(name = "useraccount_useraccountrole",
            joinColumns = @JoinColumn(name = "userAccountId",
                    foreignKey = @ForeignKey(name = "FK_UserAccount_UserAccountRole_UserAccount_Id")),
            inverseJoinColumns = @JoinColumn(name = "useraccountroleId",
                    foreignKey = @ForeignKey(name = "FK_UserAccount_UserAccountRole_UserAccountRole_Id")))
    private @Getter @Setter List<UserAccountRole> userAccountRoles;

    // @FieldMetaData(position = 28, label = "Work Groups", dataType =
    // FieldMetaDataSupportedDataType.ARRAY, autogenerated = true)
    @ManyToMany(mappedBy = "userAccountList")
    private @Getter @Setter List<WorkGroup> workGroups;

    // @FieldMetaData(position = 40, label = "Division Group", dataType =
    // FieldMetaDataSupportedDataType.OBJECT, autogenerated = true)
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "divisionGroupId", foreignKey = @ForeignKey(name = "fk_useraccount_division_group_id"))
    private @Getter @Setter DivisionGroup divisionGroup;

    /*
     * //保存用户登出时所在的页面
     * 
     * @ManyToOne private @Getter @Setter Functionality lastMenu; //
     */

    @FieldMetaData(position = 30, label = "Old Password", minLength = 6, maxLength = 20, hide = true,
            autogenerated = true)
    @Transient
    private @Getter String password;

    @FieldMetaData(position = 40, label = "New Password", minLength = 6, maxLength = 20, hide = true,
            autogenerated = true)
    @Transient
    private @Getter @Setter String newPassword;

    // 账户的联系信息
    @FieldMetaData(position = 45, label = "Contact", dataType = FieldMetaDataSupportedDataType.OBJECT)
    @OneToOne(cascade = CascadeType.ALL, fetch = FetchType.EAGER, orphanRemoval = true)
    @JoinColumn(name = "contactId", foreignKey = @ForeignKey(name = "FK_UserAccount_Contact_Id"))
    private @Getter @Setter Contact contact;

    @FieldMetaData(position = 50, label = "User Setting", dataType = FieldMetaDataSupportedDataType.OBJECT,
            required = true)
    @OneToOne(cascade = CascadeType.ALL, fetch = FetchType.EAGER, orphanRemoval = true)
    @JoinColumn(name = "userAccountConfigId", foreignKey = @ForeignKey(name = "FK_UserAccount_UserAccountConfig_Id"))
    private @Getter @Setter UserAccountConfig userSetting;

    @Transient
    @JsonIgnore
    private @Getter @Setter List<Functionality> modelOperations;

    @Transient
    @JsonIgnore
    private @Getter @Setter List<Functionality> menus;

    @Transient
    @JsonIgnore
    private @Getter @Setter List<Functionality> frontendOperations;

    @Transient
    @JsonIgnore
    private @Getter @Setter boolean superAdmin;

    @ManyToOne
    @JoinColumn(name = "ownerId", foreignKey = @ForeignKey(name = "fk_useraccount_useraccount_ownerid"),
            referencedColumnName = "id")
    private @Getter @Setter UserAccount owner;

    @Column(length = 260)
    @JsonIgnore
    private @Getter @Setter String subClassName;

    public void addRole(UserAccountRole role)
    {
        addElementIntoList(userAccountRoles, "userAccountRoles", role);
    }

    public void setLoginName(String loginName)
    {
        if (StringUtils.isNotEmpty(loginName))
        {
            this.loginName = loginName;
            hashedLoginName = CryptoUtil.generateHash(loginName);
        }
    }

    public void setPassword(String password)
    {
        if (password != null && password.length() > 0)
        {
            this.password = password;
            this.passwordSalt = CryptoUtil.generateSalt();
            this.passwordHash = CryptoUtil.hashPassword(this.password, passwordSalt);
        }
    }

    public boolean isSameUser(String userName, String password)
    {
        if (!this.loginName.equals(userName))
        {
            return false;
        }
        boolean res = CryptoUtil.validatePassword(this.passwordHash, password, passwordSalt);
        return res;
    }

    public void initDefaultValueBeforeCreation()
    {
        super.initDefaultValueBeforeCreation();
        if (StringUtils.isEmpty(password))
        {
            setPassword(CommonConstant.defaultPassword);
        }
        if (StringUtils.isEmpty(status))
        {// 只有在没有设置状态是才把状态设置为等待处理状态
            status = UserAccountStatus.PENDING.name();
        }
        nonLoginToken = CryptoUtil.generateHash(CryptoUtil.generateSalt());
        if (userSetting == null)
        {// 当没有用户配置是需要使用缺省配置
            userSetting = new UserAccountConfig();
            userSetting.setPageSize(10);
            userSetting.setViewLang(CommonConstant.defaultSystemLanguage);
            userSetting.setWorkLang(CommonConstant.defaultSystemLanguage);
        }
        else
        {
            if (userSetting.getPageSize() == null)
            {
                userSetting.setPageSize(10);
            }
            if (StringUtils.isEmpty(userSetting.getViewLang()))
            {
                userSetting.setViewLang(CommonConstant.defaultSystemLanguage);
            }
            if (StringUtils.isEmpty(userSetting.getWorkLang()))
            {
                userSetting.setWorkLang(CommonConstant.defaultSystemLanguage);
            }
        }
    }

    public void setNonLoginToken()
    {
        nonLoginToken = CryptoUtil.generateHash(CryptoUtil.generateSalt());
    }

    public List<UserAccountRole> getAllRoles()
    {
        List<UserAccountRole> result = new ArrayList<>();
        Map<String, UserAccountRole> roleMap = new HashMap<>();
        if (userAccountRoles != null && userAccountRoles.size() > 0)
        {
            putRoleInMap(userAccountRoles, roleMap);
        }

        DivisionGroup divisionGroup = this.getDivisionGroup();
        List<WorkGroup> workGroups = this.getWorkGroups();

        if (divisionGroup != null && divisionGroup.getRoles() != null)
        {
            putRoleInMap(divisionGroup.getRoles(), roleMap);
        }

        if (workGroups != null && workGroups.size() > 0)
        {
            for (WorkGroup workGroup : workGroups)
            {
                if (workGroup.getRoles() == null || workGroup.getRoles().size() == 0)
                {
                    continue;
                }
                putRoleInMap(workGroup.getRoles(), roleMap);
            }
        }

        result.addAll(roleMap.values());
        return result;
    }

    private void putRoleInMap(List<UserAccountRole> userAccountRoles, Map<String, UserAccountRole> roleMap)
    {
        if (userAccountRoles == null || userAccountRoles.size() == 0)
        {
            return;
        }

        for (UserAccountRole role : userAccountRoles)
        {
            if (!roleMap.containsKey(role.getCode()))
            {
                roleMap.put(role.getCode(), role);
            }
        }
    }
}
