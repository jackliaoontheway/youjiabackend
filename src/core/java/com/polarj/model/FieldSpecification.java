package com.polarj.model;

import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang3.StringUtils;

import com.polarj.model.annotation.FieldMetaData;
import com.polarj.model.annotation.I18nField;
import com.polarj.model.annotation.I18nKeyField;
import com.polarj.model.annotation.ModelMetaData;
import com.polarj.model.enumeration.FieldMetaDataSupportedDataType;
import com.polarj.model.enumeration.SearchType;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ModelMetaData(showDetailFieldName = "fieldFullName", searchField = "fieldFullName")
@Entity
@Table(name = "fieldspec",
        indexes = { @Index(columnList = "fieldFullName", name = "UK_FieldSpecification_fieldFullName", unique = true) })
public @ToString @EqualsAndHashCode(callSuper = false) class FieldSpecification extends GenericDbInfo
{
    private static final long serialVersionUID = -3610049039605853839L;

    public static FieldSpecification generateFieldSpecificationByFieldMetaData(FieldMetaData fMeta,
            String modelClassName, String fieldName)
    {
        if(fMeta == null || StringUtils.isEmpty(modelClassName) || StringUtils.isEmpty(fieldName))
        {
            return null;
        }
        FieldSpecification fSpec = new FieldSpecification();
        fSpec.setClassFullName(modelClassName);
        fSpec.setName(fieldName);
        fSpec.setFieldFullName(modelClassName + "." + fieldName);
        fSpec.setAdminReserved(fMeta.adminReserved());
        fSpec.setAutogenerated(fMeta.autogenerated());
        fSpec.setDataType(fMeta.dataType());
        fSpec.setDefaultValue(fMeta.defaultValue());
        fSpec.setEnumFlag(fMeta.enumClass() == Object.class ? false : true);
        fSpec.setLabelField(fMeta.labelField());
        fSpec.setHasOwner(fMeta.hasOwner());
        if (fSpec.getEnumFlag())
        {
            fSpec.setEnumerationName(fMeta.enumClass().getName());
        }
        fSpec.setFormatter(fMeta.formatter());
        fSpec.setHide(fMeta.hide());
        fSpec.setLabel(fMeta.label());
        fSpec.setTip(fMeta.tip());
        fSpec.setPosition(fMeta.position());
        fSpec.setMinLength(fMeta.minLength());
        fSpec.setMaxLength(fMeta.maxLength());
        fSpec.setMaxVal(fMeta.maxVal());
        fSpec.setMinVal(fMeta.minVal());
        fSpec.setMultiChoice(fMeta.multiChoice());
        fSpec.setEmbedded(fMeta.embedded());
        fSpec.setManagementSeparately(fMeta.managementSeparately());
        fSpec.setHasDetail(fMeta.hasDetail());
        fSpec.setPattern(fMeta.pattern());
        fSpec.setRequired(fMeta.required());
        fSpec.setUniqueField(fMeta.uniqueField());
        fSpec.setSortable(fMeta.sortable());
        fSpec.setSearchType(fMeta.searchType().name());
        if (fMeta.classForCalField() != Object.class)
        {
            fSpec.setCalculatedField(true);
            fSpec.setClassForCalField(fMeta.classForCalField().getName());
            if (fMeta.paramClassForCalClass() != Object.class)
            {
                fSpec.setParamClassForCalClass(fMeta.paramClassForCalClass().getName());
            }
        }
        return fSpec;
    }

    // 属性的全名， classFullName + name
    @FieldMetaData(position = 10, label = "Full Name", autogenerated = true, hide = true)
    @I18nKeyField
    @Column(length = 255)
    private @Getter @Setter String fieldFullName;

    // which model in full name has this field
    @FieldMetaData(position = 20, label = "Class Full Name", autogenerated = true, sortable = true,
            searchType = SearchType.VALUE)
    @Column(length = 220)
    private @Getter @Setter String classFullName;

    // this field's value is calculated by a class
    @Transient
    private @Getter @Setter Boolean calculatedField;

    // class full name for calculated field
    @FieldMetaData(position = 30, label = "Class Name for Calculated Field", autogenerated = true)
    @Column(length = 220)
    private @Getter @Setter String classForCalField;

    // class full name for calculation class,
    // since, the algorithm for calculation
    // needs more parameters
    @FieldMetaData(position = 40, label = "Class Name for Parameter", autogenerated = true)
    @Column(length = 220)
    private @Getter @Setter String paramClassForCalClass;

    // field name for both db and model
    @FieldMetaData(position = 50, label = "Name", autogenerated = true)
    @Column(length = 32)
    private @Getter @Setter String name;

    // field label which will be displayed on page.
    @FieldMetaData(position = 60, label = "Label", maxLength = 120, autogenerated = true)
    @I18nField
    @Column(length = 128)
    private @Getter @Setter String label;

    // Could be TypeScript Data Types (string, number, boolean, date, email,
    // object)
    @FieldMetaData(position = 70, label = "Data Type", autogenerated = true)
    @Column(length = 32)
    private @Getter @Setter String dataType;

    // regular express for data input
    @FieldMetaData(position = 80, label = "Pattern", maxLength = 128)
    @Column(length = 200)
    private @Getter @Setter String pattern;

    // tips for pattern
    @FieldMetaData(position = 90, label = "Tip", maxLength = 240, autogenerated = true)
    @I18nField
    @Column(length = 255)
    private @Getter @Setter String tip;

    // how to display the value
    @FieldMetaData(position = 100, label = "Formatter", maxLength = 80)
    @Column(length = 100)
    private @Getter @Setter String formatter;

    @FieldMetaData(position = 110, label = "Required", dataType = FieldMetaDataSupportedDataType.BOOLEAN)
    @Column()
    private @Getter @Setter Boolean required;

    // This field could be managed by admin only.
    @FieldMetaData(position = 120, label = "Reserved for Admin", dataType = FieldMetaDataSupportedDataType.BOOLEAN)
    @Column()
    private @Getter @Setter Boolean adminReserved;

    // 是自动生成的值，前端不能编辑
    @FieldMetaData(position = 130, label = "Generated Automatically", dataType = FieldMetaDataSupportedDataType.BOOLEAN)
    @Column()
    private @Getter @Setter Boolean autogenerated;

    // 这是一个选择性属性，值可以是枚举型，也可以是另外的持久化类型
    @Transient
    private @Getter @Setter Boolean enumFlag;

    // the full name of enum class
    @FieldMetaData(position = 140, label = "Enumeration Class Name", autogenerated = true)
    @Column(length = 220)
    private @Getter @Setter String enumerationName;

    // 如果enumerationName是一个非枚举类型的类，
    // labelField属性用于描述enumerationName对应的类中哪个属性用于显示来表示该类的一个对象
    @FieldMetaData(position = 150, label = "Label Field for Enum", autogenerated = true)
    @Column(length = 120)
    private @Getter @Setter String labelField;

    @FieldMetaData(position = 160, label = "Min Value", maxLength = 30)
    @Column(length = 32)
    private @Getter @Setter String minVal;

    @FieldMetaData(position = 170, label = "Max Value", maxLength = 30)
    @Column(length = 32)
    private @Getter @Setter String maxVal;

    @FieldMetaData(position = 180, label = "Min Length", dataType = FieldMetaDataSupportedDataType.NUMBER)
    @Column()
    private @Getter @Setter Integer minLength;

    @FieldMetaData(position = 190, label = "Max Length", dataType = FieldMetaDataSupportedDataType.NUMBER)
    @Column()
    private @Getter @Setter Integer maxLength;

    // 在表格中的列位置
    @FieldMetaData(position = 200, label = "Position", dataType = FieldMetaDataSupportedDataType.NUMBER)
    @Column()
    private @Getter @Setter Integer position;

    // 描述该字段是控制list页面显示字段
    @FieldMetaData(position = 210, label = "Hide", dataType = FieldMetaDataSupportedDataType.BOOLEAN)
    @Column()
    private @Getter @Setter Boolean hide;

    // 描述该字段是控制detail明细页面显示字段
    @FieldMetaData(position = 215, label = "DetailHide", dataType = FieldMetaDataSupportedDataType.BOOLEAN)
    @Column()
    private @Getter @Setter Boolean detailHide;

    // 描述该字段是一个需要国际化的字段
    @Transient
    private @Getter @Setter Boolean i18nField;

    // 描述该字段的值是本模型国际化资源的键值
    @Transient
    private @Getter @Setter Boolean i18nKeyField;

    // this is the value the field will be, and will
    // be persisted into ObjectFieldValue model
    @Transient
    private @Getter @Setter String value;

    @FieldMetaData(position = 220, label = "Default Value", maxLength = 60)
    @Column(length = 64)
    private @Getter @Setter String defaultValue;

    // does it support multiple choice?
    @FieldMetaData(position = 230, label = "Multiple Choice", dataType = FieldMetaDataSupportedDataType.BOOLEAN)
    @Column
    private @Getter @Setter Boolean multiChoice;

    @Transient
    private @Getter @Setter String uniqueField;

    // 提供选择性输入的值和显示内容，使用,分隔
    // 可以是：
    // 1. 枚举类型的值和显示内容
    // 2. 类关系中另外一个类的表关键字值和描述性内容
    @Transient
    private @Getter @Setter List<String> selectiveValues;

    @Transient
    private @Getter @Setter List<FieldSpecification> componentMetaDatas;

    // 标志该属性是一个组合属性，页面应该有特殊处理
    @Transient
    private @Getter @Setter boolean embedded;

    @Transient
    private @Getter @Setter boolean managementSeparately;

    @Transient
    private @Getter @Setter boolean hasDetail;

    @Transient
    private @Getter @Setter String enumValueField;

    @Transient
    private @Getter @Setter boolean hasOwner;

    public void addComponnentMetaData(FieldSpecification fs)
    {
        addElementIntoList(componentMetaDatas, "componentMetaDatas", fs);
    }

    public void addComponnentMetaData(List<FieldSpecification> fses)
    {
        if (fses == null || fses.size() == 0)
        {
            return;
        }
        for (FieldSpecification fs : fses)
        {
            addElementIntoList(componentMetaDatas, "componentMetaDatas", fs);
        }
    }

    @FieldMetaData(position = 240, label = "Sortable", dataType = FieldMetaDataSupportedDataType.BOOLEAN)
    @Column()
    private @Getter @Setter Boolean sortable;

    @FieldMetaData(position = 260, label = "Search Type", enumClass = SearchType.class)
    @Column(length = 32)
    private @Getter @Setter String searchType;
}
