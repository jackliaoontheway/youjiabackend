package com.polarj.model;

import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.ForeignKey;
import javax.persistence.Index;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import com.polarj.model.annotation.FieldMetaData;
import com.polarj.model.annotation.I18nField;
import com.polarj.model.annotation.I18nKeyField;
import com.polarj.model.annotation.ModelMetaData;
import com.polarj.model.enumeration.FieldMetaDataSupportedDataType;
import com.polarj.model.enumeration.FunctionType;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

// 业务模型的CRUD操作，使用业务模型的类名+单独的CRUD全名做code，type是service, position是0
// 例如：
// com.polarj.model.UserAccount.CREATE, com.polarj.model.UserAccount.READ,
// com.polarj.model.UserAccount.UPDATE, com.polarj.model.UserAccount.DELETE
// 用户按照每个业务模型的粒度，拥有操作权限
// 初始化业务模型操作权限的时候，暂时给除admin之外的用户读的权限。
// 在处理时，这个权限合并到model的元数据中即可。使用and来合并
@ModelMetaData(showDetailFieldName = "code")
@Entity
@Table(name = "functionality", indexes = { @Index(columnList = "code", name = "UK_Functionality_Code", unique = true) })
public @ToString @EqualsAndHashCode(callSuper = false) class Functionality extends GenericDbInfo
{
    private static final long serialVersionUID = -5150310285791904359L;

    @FieldMetaData(position = 20, label = "Code", required = true, maxLength = 128)
    @I18nKeyField
    @Column(name = "code", length = 128, nullable = false)
    private @Setter @Getter String code;

    @FieldMetaData(position = 60, label = "Position", dataType = FieldMetaDataSupportedDataType.NUMBER, required = true,
            minVal = "1")
    @Column(name = "positionSn", nullable = false)
    private @Setter @Getter Integer positionSn;

    @FieldMetaData(position = 40, label = "Label", required = true, maxLength = 128)
    @I18nField
    @Column(name = "label", length = 128)
    private @Setter @Getter String label;

    @FieldMetaData(position = 45, label = "Icon Name", maxLength = 32)
    @Column(name = "iconName", length = 32)
    private @Setter @Getter String iconName;

    @FieldMetaData(position = 50, label = "Path URL", maxLength = 128)
    @Column(name = "pathUrl", length = 128)
    private @Setter @Getter String pathUrl;

    @I18nField
    @FieldMetaData(position = 30, label = "Type", required = true, enumClass = FunctionType.class, maxLength = 128)
    @Column(name = "type", length = 128, nullable = false)
    private @Getter @Setter String type;

    @FieldMetaData(position = 40, label = "Parent Menu", dataType = FieldMetaDataSupportedDataType.OBJECT,
            enumClass = Functionality.class, labelField = "label", managementSeparately = true)
    @ManyToOne
    @JoinColumn(name = "parentId", foreignKey = @ForeignKey(name = "FK_SubMenu_Menu_Id"), referencedColumnName = "id")
    private @Getter @Setter Functionality parentMenu;

    // 专门用于菜单(type为MENU)的组织，用于在页面显示菜单
    // 在数据管理的时候是不需要显示的，也不存在修改的问题。
    @FieldMetaData(position = 70, label = "Sub Menus", dataType = FieldMetaDataSupportedDataType.ARRAY,
            enumClass = Functionality.class, managementSeparately = true, labelField = "label", multiChoice = true,
            autogenerated = true, hide = true)
    @Transient
    private @Setter @Getter List<Functionality> subMenus;
    
    @Transient
    private @Setter @Getter boolean selected;

    public void addMenu(Functionality subMenu)
    {
        addElementIntoList(subMenus, "subMenus", subMenu);
    }

}
